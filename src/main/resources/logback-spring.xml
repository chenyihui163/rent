<configuration>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!--指定应用名称-->
    <springProperty scope="context" name="springAppName" source="spring.application.name"/>
    <!--指定日志文件索引-->
    <springProperty scope="context" name="springAppIndex" source="spring.application.index"/>
    <!-- Example for logging into the build folder of your project -->
    <property name="LOG_FILE" value="${SERVICE_LOG_FOLDER:-logs}/${springAppName}/server0"/>
    <!--自定义日志输出格式-->
    <property name="CONSOLE_LOG_PATTERN"
              value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

    <!-- 定义控制台日志输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!--输出级别-->
            <level>DEBUG</level>
        </filter>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- 将日志输出到日志文件 -->
    <appender name="flatfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_FILE}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>
    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- com.ayy为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是INFO -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->

    <!--DEBUG Level: 指出细粒度信息事件对调试应用程序是非常有帮助的,就是输出debug的信息.-->
    <!--INFO level: 表明消息在粗粒度级别上突出强调应用程序的运行过程,就是输出提示信息.-->
    <!--WARN level: 表明会出现潜在错误的情形,就是显示警告信息.-->
    <!--ERROR level: 指出虽然发生错误事件,但仍然不影响系统的继续运行.就是显示错误信息.-->
    <!--FATAL level: 指出每个严重的错误事件将会导致应用程序的退出.-->
    <!--ALL level: 是最低等级的,用于打开所有日志记录.-->
    <!--OFF level: 是最高等级的,用于关闭所有日志记录.-->
    <logger name="com.rent" level="INFO" />

    <root level="INFO">
        <appender-ref ref="console"/>
        <appender-ref ref="flatfile"/>
    </root>

</configuration>